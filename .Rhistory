shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
install.packages("clusterProfiler")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
runApp('app')
install("GO.db")
runApp('app')
runApp('app')
# Install BiocManager first
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Install required Bioconductor packages
BiocManager::install(c(
"clusterProfiler",
"enrichplot",
"limma",
"msigdbr",
"org.Hs.eg.db",
"GO.db",
"KEGG.db",
"reactome.db"
), update = FALSE)
# Install required CRAN packages
install.packages(c(
"shiny",
"shinydashboard",
"DT",
"plotly",
"dplyr",
"igraph",
"ggplot2"
))
# Try loading each package
packages <- c(
"shiny", "shinydashboard", "DT", "plotly", "dplyr", "igraph", "ggplot2",
"clusterProfiler", "enrichplot", "limma", "msigdbr", "org.Hs.eg.db",
"GO.db", "KEGG.db", "reactome.db"
)
# Check if all packages can be loaded
sapply(packages, function(pkg) {
result <- tryCatch({
library(pkg, character.only = TRUE)
"Loaded successfully"
}, error = function(e) {
paste("Error:", e$message)
})
cat(pkg, ":", result, "\n")
})
runApp('app')
# Make sure BiocManager is installed
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Install GO.db and its dependencies with force
BiocManager::install(c("AnnotationDbi", "GO.db", "org.Hs.eg.db"), force = TRUE)
# Verify installation
library(GO.db)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GO.db", force = TRUE)
getwd()
.libPaths()
# First, ensure BiocManager is up to date
remove.packages("BiocManager")  # Remove existing installation
install.packages("BiocManager")  # Fresh install
library(BiocManager)
# Install GO.db with specific parameters
BiocManager::install("GO.db",
lib = "/Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library",
update = FALSE,
ask = FALSE)
library(BiocManager)
BiocManager::install("GO.db",
lib = "/Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library",
update = FALSE,
ask = FALSE)
setwd("~")  # Change to home directory
# Create and set up user library
user_lib <- "~/R/library"
dir.create(user_lib, recursive = TRUE, showWarnings = FALSE)
.libPaths(c(user_lib, .libPaths()))
# Install BiocManager fresh
remove.packages("BiocManager")
install.packages("BiocManager")
library(BiocManager)
# Install GO.db
BiocManager::install("GO.db",
lib = user_lib,
update = FALSE,
ask = FALSE,
type = "source")
library(BiocManager)
BiocManager::install("GO.db",
lib = user_lib,
update = FALSE,
ask = FALSE,
type = "source")
library(GO.db)
setwd("/Users/rasools/sdrive/projects/NBIS_CBGE_TDP/cbge-main")
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(org.Hs.eg.db)
runApp('app')
library(org.Hs.eg.db)
BiocManager::install("org.Hs.eg.db", force = TRUE)
library(org.Hs.eg.db)
source("install_packages_no_renv.R")
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
install.packages("igraph")
install.packages("igraph")
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
source("setup_environment.R")
shiny::runApp('app')
shiny::runApp('app')
install.packages("magrittr")
shiny::runApp('app')
install.packages("lifecycle")
shiny::runApp('app')
install.packages("withr")
runApp('app')
runApp('app')
runApp('app')
install.packages("vctrs")
runApp('app')
install.packages("purrr")
runApp('app')
install.packages("lazyeval")
runApp('app')
runApp('app')
source("setup_environment.R")
shiny::runApp('app')
renv::snapshot()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(shinyFiles)
renv::install("library(shinyFiles)")
renv::install("shinyFiles")
library(shinyFiles)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
renv::install("shinyTree")
runApp('app')
> runApp('app')
library(shinyTree)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
install.packages("shinyTree")
runApp('app')
library(shiny)
library(shinyTree)
ui <- fluidPage(
shinyTreeOutput("tree")
)
packageVersion("shinyTree")
ls("package:shinyTree")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
